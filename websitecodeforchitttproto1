HTML CODE

<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Your Name - Portfolio • Author • Brand</title>
    <link rel="stylesheet" href="styles.css">
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/gsap.min.js"></script>
    <script src="https://cdnjs.cloudflare.com/ajax/libs/gsap/3.11.4/ScrollTrigger.min.js"></script>
</head>
<body>
    <header class="header">
        <nav class="nav">
            <div class="logo">YN</div>
            <ul class="nav-list">
                <li class="nav-item"><a href="#home" class="nav-link">Home</a></li>
                <li class="nav-item"><a href="#about" class="nav-link">About</a></li>
                <li class="nav-item"><a href="#portfolio" class="nav-link">Portfolio</a></li>
                <li class="nav-item"><a href="#books" class="nav-link">Books</a></li>
                <li class="nav-item"><a href="#blog" class="nav-link">Blog</a></li>
                <li class="nav-item"><a href="#contact" class="nav-link">Contact</a></li>
            </ul>
            <div class="mode-toggle">
                <input type="checkbox" id="dark-mode-toggle">
                <label for="dark-mode-toggle"></label>
            </div>
        </nav>
    </header>

    <main class="main">
        <section id="home" class="section full-height">
            <h1 class="heading">Your Name</h1>
            <p class="tagline">Crafting Digital Experiences • Authoring Stories • Building Brands</p>
            <div class="cta-container">
                <a href="#portfolio" class="cta-button">View My Work</a>
                <a href="#contact" class="cta-button secondary">Get in Touch</a>
            </div>
        </section>

        <section id="about" class="section full-height">
            <div class="about-content">
                <h2 class="heading">About Me</h2>
                <p class="text">Your compelling story goes here...</p>
                <div class="skills-container">
                    <div class="skill">Web Design</div>
                    <div class="skill">UX/UI</div>
                    <div class="skill">Writing</div>
                    <div class="skill">Branding</div>
                </div>
            </div>
            <div class="about-image">
                <img src="your-image.jpg" alt="Your Name" class="image">
            </div>
        </section>

        <section id="portfolio" class="section">
            <h2 class="heading">Portfolio</h2>
            <div class="portfolio-filter">
                <button class="filter-btn active" data-filter="all">All</button>
                <button class="filter-btn" data-filter="web">Web</button>
                <button class="filter-btn" data-filter="design">Design</button>
                <button class="filter-btn" data-filter="brand">Brand</button>
            </div>
            <div class="portfolio-grid">
                <div class="portfolio-item" data-category="web">
                    <img src="project1.jpg" alt="Project 1" class="image">
                    <div class="portfolio-overlay">
                        <h3 class="heading">Project 1</h3>
                        <p class="text">Web Design</p>
                    </div>
                </div>
                <!-- Add more portfolio items -->
            </div>
        </section>

        <section id="books" class="section full-height">
            <h2 class="heading">My Books</h2>
            <div class="book-showcase">
                <div class="book">
                    <img src="book1.jpg" alt="Book 1" class="image">
                    <h3 class="heading">Book Title 1</h3>
                    <p class="text">Brief description...</p>
                    <a href="#" class="buy-button">Buy Now</a>
                </div>
                <!-- Add more books -->
            </div>
        </section>

        <section id="blog" class="section">
            <h2 class="heading">Latest Articles</h2>
            <div class="blog-grid">
                <article class="blog-post">
                    <img src="article1.jpg" alt="Article 1" class="image">
                    <h3 class="heading">Article Title 1</h3>
                    <p class="text">Article excerpt...</p>
                    <a href="#" class="read-more">Read More</a>
                </article>
                <!-- Add more blog posts -->
            </div>
            <a href="#" class="view-all">View All Articles</a>
        </section>

        <section id="contact" class="section full-height">
            <h2 class="heading">Get in Touch</h2>
            <form id="contact-form">
                <input type="text" placeholder="Name" required>
                <input type="email" placeholder="Email" required>
                <textarea placeholder="Message" required></textarea>
                <button type="submit">Send Message</button>
            </form>
            <div class="social-links">
                <a href="#" target="_blank"><i class="fab fa-twitter"></i></a>
                <a href="#" target="_blank"><i class="fab fa-linkedin"></i></a>
                <a href="#" target="_blank"><i class="fab fa-instagram"></i></a>
            </div>
        </section>
    </main>

    <footer class="footer">
        <p class="text">&copy; 2024 Your Name. All rights reserved.</p>
    </footer>

    <script src="script.js"></script>
</body>
</html>

CSS CODE 


/* styles.css */
:root {
    --primary-color: #2c3e50;
    --secondary-color: #e74c3c;
    --text-color: #333;
    --background-color: #ecf0f1;
    --accent-color: #3498db;
}

* {
    margin: 0;
    padding: 0;
    box-sizing: border-box;
}

body {
    font-family: 'Raleway', sans-serif;
    line-height: 1.6;
    color: var(--text-color);
    background-color: var(--background-color);
    cursor: none;
}

.header {
    padding: 1rem;
    position: fixed;
    width: 100%;
    top: 0;
    z-index: 1000;
    background-color: rgba(255, 255, 255, 0.9);
    backdrop-filter: blur(10px);
}

.nav {
    display: flex;
    justify-content: space-between;
    align-items: center;
}

.logo {
    font-size: 2rem;
    font-weight: bold;
    color: var(--primary-color);
}

.nav-list {
    display: flex;
    list-style-type: none;
}

.nav-item {
    margin-left: 2rem;
}

.nav-link {
    color: var(--text-color);
    text-decoration: none;
    font-weight: bold;
    transition: color 0.3s ease;
}

.nav-link:hover {
    color: var(--secondary-color);
}

.mode-toggle {
    position: relative;
    width: 50px;
    height: 25px;
}

.mode-toggle input {
    opacity: 0;
    width: 0;
    height: 0;
}

.mode-toggle label {
    position: absolute;
    cursor: pointer;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    background-color: #ccc;
    transition: .4s;
    border-radius: 34px;
}

.mode-toggle label:before {
    position: absolute;
    content: "";
    height: 21px;
    width: 21px;
    left: 2px;
    bottom: 2px;
    background-color: white;
    transition: .4s;
    border-radius: 50%;
}

.mode-toggle input:checked + label {
    background-color: var(--primary-color);
}

.mode-toggle input:checked + label:before {
    transform: translateX(25px);
}

.section {
    padding: 2rem;
}

.heading {
    font-size: 2rem;
    font-weight: bold;
    color: var(--primary-color);
}

.tagline {
    font-size: 1.5rem;
    margin-bottom: 2rem;
}

.cta-container {
    display: flex;
    gap: 1rem;
}

.cta-button {
    padding: 0.5rem 1rem;
    border: none;
    border-radius: 5px;
    font-weight: bold;
    text-decoration: none;
    transition: background-color 0.3s ease;
}

.cta-button:first-child {
    background-color: var(--secondary-color);
    color: white;
}

.cta-button.secondary {
    background-color: transparent;
    border: 2px solid var(--secondary-color);
    color: var(--secondary-color);
}

.about-content, .about-image {
    flex: 1;
    padding: 2rem


JAVASCRIPT CODE 

// script.js
document.addEventListener('DOMContentLoaded', (event) => {
  gsap.registerPlugin(ScrollTrigger);

  // Custom cursor
  const cursor = document.querySelector('.cursor');
  const cursorRing = document.querySelector('.cursor-ring');

  document.addEventListener('mousemove', (e) => {
    const x = e.clientX;
    const y = e.clientY;
    cursor.style.top = `${y}px`;
    cursor.style.left = `${x}px`;
    cursorRing.style.top = `${y}px`;
    cursorRing.style.left = `${x}px`;
  });

  document.addEventListener('click', () => {
    cursor.classList.add('expand');
    setTimeout(() => {
      cursor.classList.remove('expand');
    }, 500);
  });

  // Smooth scrolling for navigation
  const navLinks = document.querySelectorAll('a[href^="#"]');
  navLinks.forEach((link) => {
    link.addEventListener('click', (e) => {
      e.preventDefault();
      const target = document.querySelector(link.getAttribute('href'));
      gsap.to(window, {
        duration: 1,
        scrollTo: target.offsetTop,
        ease: 'power2.inOut',
      });
    });
  });

  // Animated text on home page
  const text = document.querySelector('.animated-text');
  if (text) {
    gsap.to(text, {
      duration: 1,
      opacity: 1,
      y: 0,
      ease: 'power3.out',
      scrollTrigger: {
        trigger: text,
        start: 'top 80%',
      },
    });
  }

  // Portfolio filtering
  const filterButtons = document.querySelectorAll('.filter-btn');
  const portfolioItems = document.querySelectorAll('.portfolio-item');

  filterButtons.forEach((button) => {
    button.addEventListener('click', () => {
      const filter = button.dataset.filter;
      filterButtons.forEach((btn) => btn.classList.remove('active'));
      button.classList.add('active');

      portfolioItems.forEach((item) => {
        if (filter === 'all' || item.dataset.category === filter) {
          gsap.to(item, { duration: 0.5, scale: 1, opacity: 1 });
        } else {
          gsap.to(item, { duration: 0.5, scale: 0.8, opacity: 0.3 });
        }
      });
    });
  });

  // Portfolio item hover effect
  portfolioItems.forEach((item) => {
    item.addEventListener('mouseenter', () => {
      gsap.to(item.querySelector('.portfolio-overlay'), { duration: 0.3, opacity: 1 });
    });
    item.addEventListener('mouseleave', () => {
      gsap.to(item.querySelector('.portfolio-overlay'), { duration: 0.3, opacity: 0 });
    });
  });

  // Animate sections on scroll
  gsap.utils.toArray('section').forEach((section) => {
    gsap.from(section, {
      opacity: 0,
      y: 50,
      duration: 1,
      scrollTrigger: {
        trigger: section,
        start: 'top 80%',
      },
    });
  });

  // Dark mode toggle
  const darkModeToggle = document.getElementById('dark-mode-toggle');
  const body = document.body;

  darkModeToggle.addEventListener('change', () => {
    body.classList.toggle('dark-mode');
    if (body.classList.contains('dark-mode')) {
      localStorage.setItem('darkMode', 'enabled');
    } else {
      localStorage.setItem('darkMode', null);
    }
  });

  // Check for saved dark mode preference
  if (localStorage.getItem('darkMode') === 'enabled') {
    body.classList.add('dark-mode');
    darkModeToggle.checked = true;
  }

  // Form submission handling
  const contactForm = document.getElementById('contact-form');
  if (contactForm) {
    contactForm.addEventListener('submit', (e) => {
      e.preventDefault();
      // Here you would typically send the form data to a server
      alert('Form submitted! (This is a placeholder action)');
      contactForm.reset();
    });
  }

  // Parallax effect for background images
  gsap.utils.toArray('.parallax-bg').forEach((bg) => {
    gsap.to(bg, {
      backgroundPositionY: '50%',
      ease: 'none',
      scrollTrigger: {
        trigger: bg,
        start: 'top bottom',
        end: 'bottom top',
        scrub: true,
      },
    });
  });

  // Animate skill bars
  gsap.utils.toArray('.skill').forEach((skill) => {
    gsap.from(skill, {
      width: 0,
      duration: 1.5,
      ease: 'power3.out',
      scrollTrigger: {
        trigger: skill,
        start: 'top 80%',
      },
    });
  });

  // Animated counter for statistics
  const counters = document.querySelectorAll('.counter');
  counters.forEach((counter) => {
    const updateCount = () => {
      const target = +counter.getAttribute('data-target');
      const count = +counter.innerText;
      const inc = Math.min(target, count + Math.ceil(target / 200));
      if (count < target) {
        counter.innerText = inc;
        setTimeout(updateCount, 1);
      } else {
        counter.innerText = target;
      }
    };
    gsap.to(counter, {
      textContent: 0,
      duration: 1,
      ease: 'power1.in',
      snap: { textContent: 1 },
      stagger: 1,
      scrollTrigger: {
        trigger: counter,
        start: 'top 80%',
      },
      onUpdate: updateCount,
    });
  });
});


class CosmicConsciousNavigator {
  constructor(container) {
    this.container = container;
    this.stars = [];
    this.connections = [];
    this.prism = new ConsciousnessPrism(this);
    this.temporalOrbits = new TemporalOrbits(this); // Assuming TemporalOrbits handles time points
    this.initCosmos();
  }

  initCosmos() {
    this.createStars();
    this.createNebulae(); // Placeholder for visual elements representing connections
    this.container.appendChild(this.prism.element);
    this.container.appendChild(this.temporalOrbits.element); // Assuming element exists
    this.initSynapticNavigation();
    this.initTemporalExploration();
  }

  // ... (rest of the original code)

  initSynapticNavigation() {
    this.navigationNodes = document.querySelectorAll('.nav-node');
    this.navigationConnections = [];
    this.navigationNodes.forEach(node => {
      node.addEventListener('click', () => this.activateNavigationNode(node));
    });
  }

  activateNavigationNode(node) {
    this.navigationNodes.forEach(otherNode => {
      if (otherNode !== node) {
        otherNode.classList.remove('active');
      }
    });
    node.classList.add('active');
    this.updateNavigationConnections(node);
  }

  updateNavigationConnections(activeNode) {
    this.navigationConnections.forEach(conn => conn.remove());
    this.navigationConnections = [];

    // Example: Connect to stars within the same nebula
    const nebula = activeNode.closest('.nebula');
    if (nebula) {
      const connectedStars = nebula.querySelectorAll('.star');
      connectedStars.forEach(star => this.drawConnection(activeNode, star));
    }
  }

  drawConnection(start, end) {
    // Create an SVG line between nodes
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    line.setAttribute('x1', start.offsetLeft);
    line.setAttribute('y1', start.offsetTop);
    line.setAttribute('x2', end.offsetLeft);
    line.setAttribute('y2', end.offsetTop);
    svg.appendChild(line);
    document.body.appendChild(svg);
    this.navigationConnections.push(svg);
  }

  initTemporalExploration() {
    this.timePool = document.createElement('div');
    this.timePool.classList.add('time-pool');
    this.container.appendChild(this.timePool);
    this.createTimePoints();
  }

  createTimePoints() {
    // Assuming the functionality is implemented in TemporalOrbits
    this.temporalOrbits.createTimePoints();
  }
}




class SynapticNavigation {
  constructor() {
    this.nodes = document.querySelectorAll('.nav-node');
    this.connections = [];
    this.initConnections();
  }

  initConnections() {
    this.nodes.forEach(node => {
      node.addEventListener('click', () => this.activateNode(node));
    });
  }

  activateNode(node) {
    node.classList.add('active');
    this.updateConnections(node);
  }

  updateConnections(activeNode) {
    this.nodes.forEach(node => {
      if (node !== activeNode) {
        this.drawConnection(activeNode, node);
      }
    });
  }

  drawConnection(start, end) {
    // Create an SVG line between nodes
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    line.setAttribute('x1', start.offsetLeft);
    line.setAttribute('y1', start.offsetTop);
    line.setAttribute('x2', end.offsetLeft);
    line.setAttribute('y2', end.offsetTop);
    svg.appendChild(line);
    document.body.appendChild(svg);
  }
}

class TemporalExploration {
  constructor(container) {
    this.container = container;
    this.timePool = document.createElement('div');
    this.timePool.classList.add('time-pool');
    this.container.appendChild(this.timePool);
    this.createTimePoints();
  }

  createTimePoints() {
    const timePoints = [
      { year: 2015, event: "Started writing" },
      { year: 2018, event: "Published first book" },
      { year: 2021, event: "Launched brand" }
    ];

    timePoints.forEach(point => {
      const timePoint = document.createElement('div');
      timePoint.classList.add('time-point');
      timePoint.style.left = `${Math.random() * 100}%`;
      timePoint.style.top = `${Math.random() * 100}%`;
      timePoint.textContent = point.year;
      this.timePool.appendChild(timePoint);

      timePoint.addEventListener('click', () => this.revealEvent(point));
    });
  }

  revealEvent(point) {
    // Show event details
    const modal = document.createElement('div');
    modal.classList.add('modal');
    modal.textContent = point.event;
    document.body.appendChild(modal);
  }
}

new SynapticNavigation();
new TemporalExploration(document.querySelector('.temporal-container'));

initSynapticNavigation() {
    this.navigationNodes = document.querySelectorAll('.nav-node');
    this.navigationConnections = [];
    this.navigationNodes.forEach(node => {
      node.addEventListener('click', () => this.activateNavigationNode(node));
    });
  }

  activateNavigationNode(node) {
    this.navigationNodes.forEach(otherNode => {
      if (otherNode !== node) {
        otherNode.classList.remove('active');
      }
    });
    node.classList.add('active');
    this.updateNavigationConnections(node);
  }

  updateNavigationConnections(activeNode) {
    this.navigationConnections.forEach(conn => conn.remove());
    this.navigationConnections = [];
    // Update connections based on active node and related content (e.g., nebulae)
    this.stars.forEach(star => {
      if (/* condition for connection between star and active node */) {
        this.drawConnection(activeNode, star);
      }
    });
  }

  drawConnection(start, end) {
    // Create an SVG line or visual path between elements
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');   
 // Or a custom path
    line.setAttribute('x1', start.offsetLeft);
    line.setAttribute('y1', start.offsetTop);
    line.setAttribute('x2', end.offsetLeft);
    line.setAttribute('y2', end.offsetTop);
    svg.appendChild(line);
    document.body.appendChild(svg);
    this.navigationConnections.push(svg);
  }

  initTemporalExploration() {
    this.timePool = document.createElement('div');
    this.timePool.classList.add('time-pool');
    this.container.appendChild(this.timePool);
    this.createTimePoints();
  }

  createTimePoints() {
    // Assuming the functionality is implemented in TemporalOrbits
    this.temporalOrbits.createTimePoints();
  }
}


class ConsciousnessPrism {
  constructor(container) {
    this.container = container;
    this.prism = document.createElement('div');
    this.prism.classList.add('prism');
    this.container.appendChild(this.prism);
    this.createFaces();
    this.bindEvents();
  }

  createFaces() {
    const faces = ['Intuition', 'Reason', 'Emotion', 'Perception', 'Imagination'];
    faces.forEach((face, index) => {
      const faceElement = document.createElement('div');
      faceElement.classList.add('prism-face');
      faceElement.textContent = face;
      faceElement.style.transform = `rotateY(${index * 72}deg) translateZ(100px)`;
      this.prism.appendChild(faceElement);
    });
  }

  bindEvents() {
    let startX, startY;
    this.container.addEventListener('mousedown', (e) => {
      const { clientX: startX, clientY: startY } = e;
    });

    this.container.addEventListener('mousemove', (e) => {
      if (startX && startY) {
        const mouseXDelta = e.clientX - startX;
        const mouseYDelta = e.clientY - startY;
        this.rotatePrism(mouseXDelta, mouseYDelta);
      }
    });

    this.container.addEventListener('mouseup', () => {
      startX = startY = null;
    });
  }

  rotatePrism(mouseXDelta, mouseYDelta) {
    const rotateY = mouseXDelta * 0.5;
    const rotateX = mouseYDelta * 0.5;
    this.prism.style.transform = `rotateX(${rotateX}deg) rotateY(${rotateY}deg)`;
    this.updateContent(rotateY);
  }

  updateContent(rotation) {
    // Change site content based on the visible face of the prism
  }
}


class StoryConstellation {
  constructor(container) {
    this.container = container;
    this.stars = [];
    this.lines = [];
    this.createStars();
  }

  createStars() {
    const stories = ['Consciousness', 'Creativity', 'Human Experience', 'Duality', 'Growth'];
    stories.forEach((story, index) => {
      const star = document.createElement('div');
      star.classList.add('star');
      star.textContent = story;
      star.id = `star-${index}`; // Unique identifier
      star.style.left = `${Math.random() * 100}%`;
      star.style.top = `${Math.random() * 100}%`;
      this.container.appendChild(star);
      this.stars.push(star);
      star.addEventListener('click', () => this.connectStars(star));
    });
  }

  connectStars(star) {
    if (this.selectedStar && this.selectedStar !== star) {
      this.drawLine(this.selectedStar, star);
      this.selectedStar = null;
    } else {
      this.selectedStar = star;
    }
  }

  drawLine(star1, star2) {
    const svg = document.createElementNS('http://www.w3.org/2000/svg', 'svg');
    svg.classList.add('constellation-line');
    svg.style.position = 'absolute';
    svg.style.left = '0';
    svg.style.top = '0';
    svg.style.width = '100%';
    svg.style.height = '100%';

    const line = document.createElementNS('http://www.w3.org/2000/svg', 'line');
    line.setAttribute('x1', star1.offsetLeft);
    line.setAttribute('y1', star1.offsetTop);
    line.setAttribute('x2', star2.offsetLeft);
    line.setAttribute('y2', star2.offsetTop);
    line.setAttribute('stroke', 'black');
    line.setAttribute('stroke-width', '2');

    svg.appendChild(line);
    this.container.appendChild(svg);
    this.lines.push(svg);
  }
}
